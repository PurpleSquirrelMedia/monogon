From 3ec1e2168d64d880231c7bc3b022ac6e6ef342ad Mon Sep 17 00:00:00 2001
From: Lorenz Brun <lorenz@monogon.tech>
Date: Tue, 30 Nov 2021 03:40:11 +0100
Subject: [PATCH] Remove gogo compatibility hack

We build the whole thing with Bazel so the protobuf generated code uses
the correct runtime support library by definition.
---
 extensions/validator_field/validator_field.go | 17 -----------------
 1 file changed, 17 deletions(-)

diff --git a/extensions/validator_field/validator_field.go b/extensions/validator_field/validator_field.go
index 224e414..0e2d8fb 100644
--- a/extensions/validator_field/validator_field.go
+++ b/extensions/validator_field/validator_field.go
@@ -5,27 +5,10 @@ import (
 	"reflect"
 	"strings"
 
-	"github.com/golang/protobuf/proto"
-	"github.com/golang/protobuf/protoc-gen-go/descriptor"
 	validator "github.com/mwitkow/go-proto-validators"
 	"github.com/pseudomuto/protoc-gen-doc/extensions"
 )
 
-func init() {
-	// NOTE: mwitkow/go-proto-validators uses gogo/profobuf/proto and therefore
-	// only registers the extension under gogo. We need to register it under
-	// golang/protobuf/proto with the same properties, except using the
-	// golang/protobuf FieldOptions descriptor.
-	proto.RegisterExtension(&proto.ExtensionDesc{
-		ExtendedType:  (*descriptor.FieldOptions)(nil),
-		ExtensionType: validator.E_Field.ExtensionType,
-		Field:         validator.E_Field.Field,
-		Name:          validator.E_Field.Name,
-		Tag:           validator.E_Field.Tag,
-		Filename:      validator.E_Field.Filename,
-	})
-}
-
 // ValidatorRule represents a single validator rule from the (validator.field) method option extension.
 type ValidatorRule struct {
 	Name  string      `json:"name"`
-- 
2.25.1

